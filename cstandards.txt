//Tabs are justice.

#Top of every file.
/*****************filename**************/
//Author: Aaron Brunette
//Github: abrunette
//Last updated: 20YY/MM/DD
//Compiled with
//Written on 
//Purpose:
/***************************************/

#Includes
//(give what functions a library/header is used for in the program)
/* Common libraries */
#include <stdio.h>      //C standard I/O library
#include <unistd.h>     //POSIX OS API
#include <errno.h>      //C error codes
#include <stdlib.h>     //C general library
#include <fcntl.h>      //file control library
#include <time.h>       //time/clock library
#include <math.h>       //C Math library
#include <pthread.h>    //pthread library
#include <semaphore.h>  //semaphore library
#include <sys/types.h>	//additional C data types
#include <sys/stat.h>	  //C file attributes

#Top of main
//Purpose:
//User information:
//Algorithm:  (if needed)
//Input:  (if needed)
//Output: (if needed)

int main(int argc, char* argv[])
{

  exit(0);
}

#Top of functions
//Purpose:
//Parameters:
//Algorithm:

************************Common code usage******************************
#main command line error checking
  argc is equal to the number of command line arguments recieved. The file name is 1. If argc == 1 then only the file
  name was received.
  
  *argv[] is an array of arrays. argv[0] holds the file name, don't edit or access this. Successive arguments are placed
  in the following array slots. I.E. ./<filename> <arg1> <arg2> ...
  argv[] = [filename] [arg1] [arg2] ...
              [0]       [1]    [2]
              
#converting command line argument to interger
atoi(<input here>);   //example:  double userInput = atoi(argv[1]);
strtol(<input here>, <end ptr>, <base of conversion>);  //example:  int seed = strtol(argv[1], NULL, 10);

#using perror
Use perror instead of printf. exit(1).

#compile to executable in vim gcc
gcc -o <exefilename> <c file>
